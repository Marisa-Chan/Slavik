#include "game.h"
#include "resources.h"
#include "fmt/core.h"
#include "fmt/printf.h"
#include "system.h"

namespace Game
{
    
const Common::Point GScrOff(140, 0);

const std::map<uint8_t, vec3i> Engine::_mapsLights = 
{{ 42, {-70,   0,   0} },
 { 43, { -1,  -1,  -1} },
 { 44, {-20,  -1, -70} },
 { 45, {  0, -50, -50} },
 { 46, { -1,  -1,  -1} },
 { 47, { -1,  -1,  -1} },
 { 48, { -1,  -1,  -1} },
 { 49, { -1,  -1,  -1} },
 { 50, { -1,  -1,  -1} }};

const std::array<int32_t, 13> Engine::_lightPhazes = 
{      0,   1800,   1830,   3570,
    3600,   5400,   8100,  11700,
   11880,  11910,  16155,  16200,
   18900};
 
const std::vector<Common::Rect> Engine::_mainMenuBoxes =
{
    //{233, 130, 425, 161},
    {290, 161, 590, 210},
    //{231, 164, 404, 199},
    {288, 205, 504, 250},
    //{212, 200, 390, 240},
    {265, 250, 488, 303},
    //{224, 241, 352, 281},
    {280, 303, 440, 354},
    //{215, 282, 333, 321},
    {268, 353, 416, 402},
    //{222, 327, 300, 371},
    {276, 409, 366, 464}
};

const std::vector<Common::Rect> Engine::_saveMenuBoxes = 
{
    //{140, 69, 510, 100},
    {175, 86, 638, 125},
    //{140, 100, 510, 130},
    {175, 125, 638, 162},
    //{140, 131, 510, 160},
    {175, 164, 638, 200},
    //{140, 162, 510, 190},
    {175, 203, 638, 238},
    //{140, 193, 510, 220},
    {175, 241, 638, 275},
    //{140, 224, 510, 250},
    {175, 280, 638, 313},
    //{140, 255, 510, 280},
    {175, 319, 638, 350},
    //{140, 286, 510, 310},
    {175, 358, 638, 388},
    //{140, 317, 510, 340},
    {175, 396, 638, 425},
    //{140, 348, 510, 370},
    {175, 435, 638, 463} 
};

const int8_t Engine::EqLookUp1[8][6] =
{{EQSLOT_SLOT3, EQSLOT_SLOT2, EQSLOT_SLOT4, EQSLOT_SLOT1, EQSLOT_SLOT0, EQSLOT_SLOT5},
 {EQSLOT_SLOT3, EQSLOT_SLOT2, EQSLOT_SLOT4, EQSLOT_SLOT0, EQSLOT_SLOT1, EQSLOT_SLOT5},
 {EQSLOT_SLOT3, EQSLOT_SLOT2, EQSLOT_SLOT4, EQSLOT_SLOT0, EQSLOT_SLOT1, EQSLOT_SLOT5},
 {EQSLOT_SLOT3, EQSLOT_SLOT2, EQSLOT_SLOT4, EQSLOT_SLOT0, EQSLOT_SLOT1, EQSLOT_SLOT5},
 {EQSLOT_SLOT3, EQSLOT_SLOT2, EQSLOT_SLOT4, EQSLOT_SLOT0, EQSLOT_SLOT5, EQSLOT_SLOT1},
 {EQSLOT_SLOT3, EQSLOT_SLOT2, EQSLOT_SLOT5, EQSLOT_SLOT4, EQSLOT_SLOT1, EQSLOT_SLOT0},
 {EQSLOT_SLOT3, EQSLOT_SLOT2, EQSLOT_SLOT5, EQSLOT_SLOT4, EQSLOT_SLOT1, EQSLOT_SLOT0},
 {EQSLOT_SLOT3, EQSLOT_SLOT2, EQSLOT_SLOT4, EQSLOT_SLOT5, EQSLOT_SLOT1, EQSLOT_SLOT0}};

const int8_t Engine::EqLookUp2[EQSLOT_SLOT4][8][6] = {
{{EQSLOT_SLOT3, EQSLOT_SLOT2, EQSLOT_SLOT0, EQSLOT_SLOT1, EQSLOT_SLOT4, EQSLOT_SLOT5},
 {EQSLOT_SLOT3, EQSLOT_SLOT2, EQSLOT_SLOT0, EQSLOT_SLOT1, EQSLOT_SLOT4, EQSLOT_SLOT5},
 {EQSLOT_SLOT3, EQSLOT_SLOT4, EQSLOT_SLOT0, EQSLOT_SLOT2, EQSLOT_SLOT1, EQSLOT_SLOT5},
 {EQSLOT_SLOT3, EQSLOT_SLOT4, EQSLOT_SLOT5, EQSLOT_SLOT1, EQSLOT_SLOT0, EQSLOT_SLOT2},
 {EQSLOT_SLOT3, EQSLOT_SLOT5, EQSLOT_SLOT4, EQSLOT_SLOT1, EQSLOT_SLOT0, EQSLOT_SLOT2},
 {EQSLOT_SLOT3, EQSLOT_SLOT5, EQSLOT_SLOT4, EQSLOT_SLOT1, EQSLOT_SLOT0, EQSLOT_SLOT2},
 {EQSLOT_SLOT3, EQSLOT_SLOT5, EQSLOT_SLOT4, EQSLOT_SLOT1, EQSLOT_SLOT0, EQSLOT_SLOT2},
 {EQSLOT_SLOT3, EQSLOT_SLOT0, EQSLOT_SLOT2, EQSLOT_SLOT1, EQSLOT_SLOT4, EQSLOT_SLOT5}},
{{EQSLOT_SLOT3, EQSLOT_SLOT2, EQSLOT_SLOT1, EQSLOT_SLOT4, EQSLOT_SLOT0, EQSLOT_SLOT5},
 {EQSLOT_SLOT3, EQSLOT_SLOT2, EQSLOT_SLOT1, EQSLOT_SLOT4, EQSLOT_SLOT0, EQSLOT_SLOT5},
 {EQSLOT_SLOT3, EQSLOT_SLOT2, EQSLOT_SLOT1, EQSLOT_SLOT4, EQSLOT_SLOT0, EQSLOT_SLOT5},
 {EQSLOT_SLOT3, EQSLOT_SLOT4, EQSLOT_SLOT0, EQSLOT_SLOT1, EQSLOT_SLOT2, EQSLOT_SLOT5},
 {EQSLOT_SLOT3, EQSLOT_SLOT2, EQSLOT_SLOT5, EQSLOT_SLOT0, EQSLOT_SLOT4, EQSLOT_SLOT1},
 {EQSLOT_SLOT3, EQSLOT_SLOT5, EQSLOT_SLOT0, EQSLOT_SLOT4, EQSLOT_SLOT1, EQSLOT_SLOT2},
 {EQSLOT_SLOT3, EQSLOT_SLOT5, EQSLOT_SLOT4, EQSLOT_SLOT1, EQSLOT_SLOT0, EQSLOT_SLOT2},
 {EQSLOT_SLOT3, EQSLOT_SLOT2, EQSLOT_SLOT1, EQSLOT_SLOT4, EQSLOT_SLOT0, EQSLOT_SLOT5}},
{{EQSLOT_SLOT3, EQSLOT_SLOT2, EQSLOT_SLOT0, EQSLOT_SLOT4, EQSLOT_SLOT1, EQSLOT_SLOT5},
 {EQSLOT_SLOT3, EQSLOT_SLOT2, EQSLOT_SLOT0, EQSLOT_SLOT5, EQSLOT_SLOT4, EQSLOT_SLOT1},
 {EQSLOT_SLOT3, EQSLOT_SLOT5, EQSLOT_SLOT4, EQSLOT_SLOT2, EQSLOT_SLOT0, EQSLOT_SLOT1},
 {EQSLOT_SLOT3, EQSLOT_SLOT5, EQSLOT_SLOT4, EQSLOT_SLOT0, EQSLOT_SLOT1, EQSLOT_SLOT2},
 {EQSLOT_SLOT3, EQSLOT_SLOT2, EQSLOT_SLOT5, EQSLOT_SLOT4, EQSLOT_SLOT0, EQSLOT_SLOT1},
 {EQSLOT_SLOT3, EQSLOT_SLOT4, EQSLOT_SLOT1, EQSLOT_SLOT0, EQSLOT_SLOT2, EQSLOT_SLOT5},
 {EQSLOT_SLOT3, EQSLOT_SLOT4, EQSLOT_SLOT1, EQSLOT_SLOT0, EQSLOT_SLOT2, EQSLOT_SLOT5},
 {EQSLOT_SLOT3, EQSLOT_SLOT0, EQSLOT_SLOT2, EQSLOT_SLOT1, EQSLOT_SLOT4, EQSLOT_SLOT5}},
{{EQSLOT_SLOT3, EQSLOT_SLOT2, EQSLOT_SLOT1, EQSLOT_SLOT4, EQSLOT_SLOT0, EQSLOT_SLOT5},
 {EQSLOT_SLOT3, EQSLOT_SLOT2, EQSLOT_SLOT1, EQSLOT_SLOT4, EQSLOT_SLOT0, EQSLOT_SLOT5},
 {EQSLOT_SLOT3, EQSLOT_SLOT4, EQSLOT_SLOT2, EQSLOT_SLOT1, EQSLOT_SLOT0, EQSLOT_SLOT5},
 {EQSLOT_SLOT3, EQSLOT_SLOT4, EQSLOT_SLOT1, EQSLOT_SLOT0, EQSLOT_SLOT2, EQSLOT_SLOT5},
 {EQSLOT_SLOT3, EQSLOT_SLOT2, EQSLOT_SLOT5, EQSLOT_SLOT4, EQSLOT_SLOT1, EQSLOT_SLOT0},
 {EQSLOT_SLOT3, EQSLOT_SLOT5, EQSLOT_SLOT0, EQSLOT_SLOT4, EQSLOT_SLOT1, EQSLOT_SLOT2},
 {EQSLOT_SLOT3, EQSLOT_SLOT5, EQSLOT_SLOT4, EQSLOT_SLOT1, EQSLOT_SLOT0, EQSLOT_SLOT2},
 {EQSLOT_SLOT3, EQSLOT_SLOT2, EQSLOT_SLOT1, EQSLOT_SLOT4, EQSLOT_SLOT0, EQSLOT_SLOT5}} };


const int8_t Engine::EqLookUp3[EQSLOT_SLOT4][8][6] = {
{{EQSLOT_SLOT3, EQSLOT_SLOT2, EQSLOT_SLOT0, EQSLOT_SLOT4, EQSLOT_SLOT5, EQSLOT_SLOT1},
 {EQSLOT_SLOT3, EQSLOT_SLOT5, EQSLOT_SLOT2, EQSLOT_SLOT4, EQSLOT_SLOT0, EQSLOT_SLOT1},
 {EQSLOT_SLOT3, EQSLOT_SLOT5, EQSLOT_SLOT4, EQSLOT_SLOT0, EQSLOT_SLOT2, EQSLOT_SLOT1},
 {EQSLOT_SLOT3, EQSLOT_SLOT5, EQSLOT_SLOT4, EQSLOT_SLOT1, EQSLOT_SLOT0, EQSLOT_SLOT2},
 {EQSLOT_SLOT3, EQSLOT_SLOT4, EQSLOT_SLOT1, EQSLOT_SLOT0, EQSLOT_SLOT2, EQSLOT_SLOT5},
 {EQSLOT_SLOT3, EQSLOT_SLOT4, EQSLOT_SLOT1, EQSLOT_SLOT0, EQSLOT_SLOT2, EQSLOT_SLOT5},
 {EQSLOT_SLOT3, EQSLOT_SLOT1, EQSLOT_SLOT4, EQSLOT_SLOT0, EQSLOT_SLOT2, EQSLOT_SLOT5},
 {EQSLOT_SLOT3, EQSLOT_SLOT0, EQSLOT_SLOT2, EQSLOT_SLOT1, EQSLOT_SLOT4, EQSLOT_SLOT5}},
{{EQSLOT_SLOT3, EQSLOT_SLOT2, EQSLOT_SLOT1, EQSLOT_SLOT4, EQSLOT_SLOT0, EQSLOT_SLOT5},
 {EQSLOT_SLOT3, EQSLOT_SLOT2, EQSLOT_SLOT1, EQSLOT_SLOT4, EQSLOT_SLOT0, EQSLOT_SLOT5},
 {EQSLOT_SLOT3, EQSLOT_SLOT2, EQSLOT_SLOT1, EQSLOT_SLOT4, EQSLOT_SLOT0, EQSLOT_SLOT5},
 {EQSLOT_SLOT3, EQSLOT_SLOT4, EQSLOT_SLOT0, EQSLOT_SLOT1, EQSLOT_SLOT2, EQSLOT_SLOT5},
 {EQSLOT_SLOT3, EQSLOT_SLOT2, EQSLOT_SLOT5, EQSLOT_SLOT0, EQSLOT_SLOT4, EQSLOT_SLOT1},
 {EQSLOT_SLOT3, EQSLOT_SLOT5, EQSLOT_SLOT0, EQSLOT_SLOT4, EQSLOT_SLOT1, EQSLOT_SLOT2},
 {EQSLOT_SLOT3, EQSLOT_SLOT5, EQSLOT_SLOT4, EQSLOT_SLOT1, EQSLOT_SLOT0, EQSLOT_SLOT2},
 {EQSLOT_SLOT3, EQSLOT_SLOT2, EQSLOT_SLOT1, EQSLOT_SLOT4, EQSLOT_SLOT0, EQSLOT_SLOT5}},
{{EQSLOT_SLOT3, EQSLOT_SLOT2, EQSLOT_SLOT0, EQSLOT_SLOT4, EQSLOT_SLOT1, EQSLOT_SLOT5},
 {EQSLOT_SLOT3, EQSLOT_SLOT2, EQSLOT_SLOT0, EQSLOT_SLOT5, EQSLOT_SLOT4, EQSLOT_SLOT1},
 {EQSLOT_SLOT3, EQSLOT_SLOT5, EQSLOT_SLOT4, EQSLOT_SLOT2, EQSLOT_SLOT0, EQSLOT_SLOT1},
 {EQSLOT_SLOT3, EQSLOT_SLOT5, EQSLOT_SLOT4, EQSLOT_SLOT0, EQSLOT_SLOT1, EQSLOT_SLOT2},
 {EQSLOT_SLOT3, EQSLOT_SLOT2, EQSLOT_SLOT5, EQSLOT_SLOT4, EQSLOT_SLOT0, EQSLOT_SLOT1},
 {EQSLOT_SLOT3, EQSLOT_SLOT4, EQSLOT_SLOT1, EQSLOT_SLOT0, EQSLOT_SLOT2, EQSLOT_SLOT5},
 {EQSLOT_SLOT3, EQSLOT_SLOT4, EQSLOT_SLOT1, EQSLOT_SLOT0, EQSLOT_SLOT2, EQSLOT_SLOT5},
 {EQSLOT_SLOT3, EQSLOT_SLOT0, EQSLOT_SLOT2, EQSLOT_SLOT1, EQSLOT_SLOT4, EQSLOT_SLOT5}},
{{EQSLOT_SLOT3, EQSLOT_SLOT2, EQSLOT_SLOT0, EQSLOT_SLOT4, EQSLOT_SLOT5, EQSLOT_SLOT1},
 {EQSLOT_SLOT3, EQSLOT_SLOT5, EQSLOT_SLOT4, EQSLOT_SLOT2, EQSLOT_SLOT1, EQSLOT_SLOT0},
 {EQSLOT_SLOT3, EQSLOT_SLOT5, EQSLOT_SLOT4, EQSLOT_SLOT2, EQSLOT_SLOT1, EQSLOT_SLOT0},
 {EQSLOT_SLOT3, EQSLOT_SLOT5, EQSLOT_SLOT4, EQSLOT_SLOT1, EQSLOT_SLOT0, EQSLOT_SLOT2},
 {EQSLOT_SLOT3, EQSLOT_SLOT4, EQSLOT_SLOT2, EQSLOT_SLOT1, EQSLOT_SLOT0, EQSLOT_SLOT5},
 {EQSLOT_SLOT3, EQSLOT_SLOT4, EQSLOT_SLOT1, EQSLOT_SLOT0, EQSLOT_SLOT2, EQSLOT_SLOT5},
 {EQSLOT_SLOT3, EQSLOT_SLOT1, EQSLOT_SLOT0, EQSLOT_SLOT2, EQSLOT_SLOT4, EQSLOT_SLOT5},
 {EQSLOT_SLOT3, EQSLOT_SLOT0, EQSLOT_SLOT2, EQSLOT_SLOT1, EQSLOT_SLOT4, EQSLOT_SLOT5}} };


const std::array<Engine::WeapArmorItemInfo, 70> Engine::ArmorWeaponInfo = {{
{0,	112,	30,	5,	28,	1,	80,	500,	152,	166,	4},
{1,	220,	60,	5,	55,	1,	320,	700,	145,	166,	4},
{2,	332,	85,	5,	83,	1,	740,	900,	143,	166,	4},
{3,	108,	6,	6,	21,	1,	30,	500,	31,	154,	0},
{4,	212,	11,	6,	45,	1,	180,	1200,	30,	154,	0},
{5,	324,	18,	6,	74,	1,	510,	2200,	29,	154,	0},
{6,	64,	16,	2,	15,	12,	8,	400,	37,	155,	2},
{7,	88,	33,	2,	36,	18,	70,	700,	42,	155,	2},
{8,	112,	56,	2,	65,	25,	220,	1100,	43,	155,	2},
{9,	84,	22,	5,	21,	1,	40,	300,	151,	166,	4},
{10,	180,	50,	5,	45,	1,	220,	600,	147,	166,	4},
{11,	296,	76,	5,	74,	1,	580,	1000,	144,	166,	4},
{12,	140,	7,	6,	28,	1,	60,	1400,	27,	154,	0},
{13,	256,	14,	6,	55,	1,	270,	900,	35,	154,	0},
{14,	368,	20,	6,	83,	1,	660,	2500,	33,	154,	0},
{15,	72,	20,	2,	21,	12,	20,	500,	38,	155,	2},
{16,	96,	36,	2,	45,	18,	110,	800,	41,	155,	2},
{17,	120,	60,	2,	74,	25,	290,	1300,	44,	155,	2},
{18,	60,	16,	5,	3,	1,	15,	200,	150,	166,	4},
{19,	144,	40,	5,	36,	1,	140,	500,	148,	166,	4},
{20,	264,	70,	5,	65,	1,	440,	800,	149,	166,	4},
{21,	80,	5,	6,	10,	1,	10,	1200,	26,	154,	0},
{22,	172,	9,	6,	36,	1,	110,	700,	32,	154,	0},
{23,	284,	13,	6,	65,	1,	380,	2000,	28,	154,	0},
{24,	80,	24,	2,	28,	12,	40,	600,	39,	155,	2},
{25,	104,	40,	2,	55,	18,	160,	900,	40,	155,	2},
{26,	128,	64,	2,	83,	25,	370,	1500,	45,	155,	2},
{27,	380,	120,	5,	300,	1,	1,	700,	146,	166,	4},
{28,	480,	70,	6,	95,	1,	1,	800,	34,	154,	0},
{29,	160,	80,	2,	95,	30,	1,	500,	36,	155,	2},
{30,	1,	1,	0,	0,	0,	1,	30,	23,	153,	-1},
{31,	2,	2,	0,	0,	0,	3,	40,	22,	153,	-1},
{32,	3,	3,	0,	0,	0,	7,	60,	24,	153,	-1},
{33,	4,	4,	0,	0,	0,	20,	60,	25,	153,	-1},
{34,	24,	12,	6,	12,	0,	120,	2700,	54,	158,	17},
{35,	80,	45,	6,	36,	0,	420,	4200,	55,	158,	17},
{36,	128,	64,	6,	65,	0,	640,	7700,	50,	159,	8},
{37,	28,	14,	5,	23,	0,	140,	3200,	139,	165,	20},
{38,	72,	36,	5,	42,	0,	360,	4400,	140,	165,	22},
{39,	104,	52,	5,	63,	0,	520,	5100,	141,	165,	22},
{40,	128,	68,	5,	84,	0,	680,	6400,	142,	165,	22},
{41,	8,	6,	2,	19,	0,	40,	300,	66,	161,	13},
{42,	20,	15,	2,	35,	0,	100,	800,	67,	161,	16},
{43,	48,	36,	2,	56,	0,	240,	1100,	68,	161,	13},
{44,	72,	54,	2,	77,	0,	360,	1800,	69,	161,	16},
{45,	56,	28,	6,	28,	0,	280,	3000,	49,	158,	17},
{46,	108,	54,	6,	55,	0,	540,	5400,	51,	158,	17},
{47,	160,	80,	6,	83,	0,	800,	10500,	50,	159,	8},
{48,	12,	6,	5,	10,	0,	60,	2500,	130,	165,	20},
{49,	40,	20,	5,	28,	0,	200,	3600,	131,	165,	6},
{50,	88,	44,	5,	49,	0,	440,	4200,	132,	165,	20},
{51,	112,	56,	5,	70,	0,	560,	5800,	133,	165,	18},
{52,	4,	3,	2,	8,	0,	20,	400,	57,	161,	9},
{53,	16,	12,	2,	28,	0,	80,	700,	58,	161,	10},
{54,	36,	27,	2,	49,	0,	180,	1200,	59,	161,	11},
{55,	64,	48,	2,	70,	0,	320,	1500,	60,	161,	12},
{56,	36,	18,	6,	21,	0,	180,	2800,	56,	158,	17},
{57,	96,	48,	6,	45,	0,	480,	4800,	53,	158,	17},
{58,	144,	77,	6,	74,	0,	720,	9200,	50,	159,	8},
{59,	20,	10,	5,	19,	0,	100,	1900,	135,	165,	20},
{60,	56,	28,	5,	35,	0,	280,	3100,	136,	165,	20},
{61,	96,	48,	5,	56,	0,	480,	4400,	137,	165,	18},
{62,	120,	60,	5,	77,	0,	600,	5300,	138,	165,	18},
{63,	12,	9,	2,	23,	0,	60,	400,	62,	161,	15},
{64,	28,	21,	2,	42,	0,	140,	900,	63,	161,	15},
{65,	56,	52,	2,	63,	0,	280,	1800,	64,	161,	14},
{66,	80,	60,	2,	84,	0,	400,	2100,	65,	161,	14},
{67,	200,	110,	6,	95,	0,	1,	5000,	52,	159,	8},
{68,	160,	95,	5,	95,	0,	1,	4000,	134,	165,	18},
{69,	100,	80,	2,	95,	0,	1,	1000,	61,	161,	16} }};




void Engine::FreeMenuImages()
{
    for(GFX::Image *img : _menuImages)
        delete img;
    
    _menuImages.clear();
    
    if (_bkgImage)
        delete _bkgImage;
    
    _bkgImage = nullptr;
}

bool Engine::LoadMainMenuImages()
{
    _imgQueue1Count = 0;
    _imgQueue2Count = 0;
    _textQueueCount = 0;
    
    printf("Incomplete %s\n", __PRETTY_FUNCTION__);
    
    std::string tmp = fmt::format("MENU{:d}{:s}.RES", SCREENRESX, _langLiter);
    
    FSMgr::File f = FSMgr::Mgr::ReadFile(tmp);
    if (!f)
    {
        System::PostQuitMessage();
        fmt::printf("Menu file %s not found\n", tmp);
        return false;
    }
    
    FreeMenuImages();
    
    f->seek(4, 0);
    uint32_t entrySize = f->readU32L();
    size_t pos = f->tell();
    
    _bkgImage = Resources::LoadRL16BitImage(f.get());
    
    ImgQueue1(_bkgImage, Common::Point(), Common::Rect(_screenSize));

    f->seek(pos + entrySize, 0);
    for (int32_t i = 0; i < 14; ++i)
    {
        f->seek(4, 1);
        entrySize = f->readU32L();
        pos = f->tell();
        _menuImages.push_back( Resources::LoadRL16BitImage(f.get()) );
        f->seek(pos + entrySize, 0);
    }

    return true;
}


}